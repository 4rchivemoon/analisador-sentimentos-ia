#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import random

# Configurar a p√°gina
st.set_page_config(
    page_title="Analisador de Sentimentos",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        border-left: 5px solid #1f77b4;
    }
    .positive { color: #2ecc71; }
    .negative { color: #e74c3c; }
    .neutral { color: #f39c12; }
</style>
""", unsafe_allow_html=True)

class AnalisadorWeb:
    def __init__(self):
        self.topicos_populares = {
            "Tecnologia": [
                "ChatGPT est√° revolucionando tudo! Incr√≠vel! ü§ñ",
                "Odeio quando o Windows atualiza sozinho! üò†",
                "Python √© a melhor linguagem para Data Science! üêç",
                "Meu smartphone novo √© fant√°stico! üì±",
                "Internet lenta me deixa muito frustrado!",
                "Realidade Virtual √© uma experi√™ncia sensacional! üï∂Ô∏è",
                "Bateria do celular n√£o dura nada, produto ruim!",
                "GitHub Copilot aumentou minha produtividade!",
                "Redes sociais est√£o viciantes e prejudiciais!",
                "5G chegando com velocidade maravilhosa! üöÄ"
            ],
            "Filmes e S√©ries": [
                "Filme novo do cinema √© espetacular! üé¨",
                "S√©rie cancelada, que decep√ß√£o enorme!",
                "Netflix com cat√°logo excelente este m√™s!",
                "Atua√ß√µes horr√≠veis no √∫ltimo filme que vi!",
                "Document√°rio incr√≠vel, recomendo muito!",
                "Streaming muito caro pelo que oferece!",
                "Final de s√©rie foi perfeito e emocionante!",
                "Efeitos especiais uma porcaria completa!",
                "Diretor fez trabalho fant√°stico! üëè",
                "Perdi tempo assistindo esse lixo!",
            ],
            "Pol√≠tica": [
                "Governo acertou na nova medida! üëç",
                "Pol√≠ticos s√≥ sabem mentir, que nojo!",
                "Reforma importante para o pa√≠s!",
                "Corrup√ß√£o nunca acaba, desanimador!",
                "Projeto excelente para educa√ß√£o!",
                "Situa√ß√£o do pa√≠s √© terr√≠vel!",
                "L√≠der fez discurso inspirador!",
                "Que vergonha do nosso congresso!",
                "Medida vai ajudar os mais pobres!",
                "Furioso com as √∫ltimas not√≠cias!",
            ],
            "Esportes": [
                "Jogo incr√≠vel, time jogou demais! ‚öΩ",
                "Arbitragem horr√≠vel, roubaram o jogo!",
                "Jogador foi fant√°stico, hat-trick!",
                "Derrota dolorosa, time desistiu!",
                "Contrata√ß√£o excelente para o time!",
                "Que time ruim, n√£o acerta nada!",
                "Torcida maravilhosa, apoiou at√© o final!",
                "T√©cnico incompetente, tem que sair!",
                "Gol mais bonito que j√° vi! ü•Ö",
                "Precisamos de refor√ßos urgentemente!",
            ]
        }
        
        self.palavras_positivas = {
            'amo': 3, 'adoro': 3, 'incr√≠vel': 2, 'fant√°stico': 2, 'sensacional': 2,
            'maravilhoso': 2, 'perfeito': 2, 'excelente': 2, '√≥timo': 1, 'bom': 1,
            'top': 2, 'show': 2, 'maneiro': 1, 'curti': 1, 'gostei': 1, 'amei': 2,
            'recomendo': 1, 'nota10': 2, 'feliz': 1, 'alegre': 1, 'emocionante': 2,
            'revolucionando': 2, 'absurda': 2, 'melhor': 1, 'espetacular': 2
        }
        
        self.palavras_negativas = {
            'odeio': 3, 'detesto': 3, 'horr√≠vel': 2, 'terr√≠vel': 2, 'p√©ssimo': 2,
            'ruim': 1, 'lixo': 3, 'porcaria': 2, 'horroroso': 2, 'decepcionante': 2,
            'furada': 2, 'assustadora': 2, 'travando': 1, 'superestimado': 1,
            'nojo': 3, 'vergonha': 2, 'frustrado': 1, 'incompetente': 2
        }

    def analisar_sentimento(self, texto):
        texto = texto.lower()
        score = 0
        palavras_detectadas = []
        
        for palavra in texto.split():
            if palavra in self.palavras_positivas:
                score += self.palavras_positivas[palavra]
                palavras_detectadas.append(f"‚ûï{palavra}")
            elif palavra in self.palavras_negativas:
                score += self.palavras_negativas[palavra]
                palavras_detectadas.append(f"‚ûñ{palavra}")
        
        if score >= 3:
            return "üòç MUITO POSITIVO", score, palavras_detectadas, "#2ecc71"
        elif score >= 1:
            return "üòä POSITIVO", score, palavras_detectadas, "#27ae60"
        elif score <= -3:
            return "ü§¨ MUITO NEGATIVO", score, palavras_detectadas, "#c0392b"
        elif score <= -1:
            return "üò† NEGATIVO", score, palavras_detectadas, "#e74c3c"
        else:
            return "üòê NEUTRO", score, palavras_detectadas, "#f39c12"

    def buscar_tweets_simulados(self, topico, quantidade=10):
        if topico in self.topicos_populares:
            base = self.topicos_populares[topico]
        else:
            # Combinar todos os t√≥picos para busca gen√©rica
            base = []
            for tweets in self.topicos_populares.values():
                base.extend(tweets)
        
        tweets = random.sample(base, min(quantidade, len(base)))
        
        tweets_com_dados = []
        for texto in tweets:
            sentimento, score, palavras, cor = self.analisar_sentimento(texto)
            tweets_com_dados.append({
                'texto': texto,
                'sentimento': sentimento,
                'score': score,
                'palavras_chave': palavras[:3],
                'cor': cor,
                'usuario': f'user_{random.randint(1000, 9999)}',
                'likes': random.randint(0, 500),
                'retweets': random.randint(0, 100),
                'data': datetime.now().strftime("%d/%m %H:%M")
            })
        
        return tweets_com_dados

def main():
    # Inicializar analisador
    analisador = AnalisadorWeb()
    
    # Header principal
    st.markdown('<h1 class="main-header">ü§ñ ANALISADOR DE SENTIMENTOS</h1>', unsafe_allow_html=True)
    st.markdown("---")
    
    # Sidebar
    with st.sidebar:
        st.header("üîß Configura√ß√µes")
        
        topico = st.selectbox(
            "Escolha um t√≥pico:",
            ["Tecnologia", "Filmes e S√©ries", "Pol√≠tica", "Esportes", "Personalizado"]
        )
        
        if topico == "Personalizado":
            topico_personalizado = st.text_input("Digite seu t√≥pico:")
            topico = topico_personalizado if topico_personalizado else "Tecnologia"
        
        quantidade = st.slider("N√∫mero de tweets:", 5, 20, 10)
        
        analisar_btn = st.button("üéØ Analisar Sentimentos", type="primary")
    
    # Layout principal
    col1, col2 = st.columns([2, 1])
    
    if analisar_btn:
        with st.spinner("üîç Analisando tweets..."):
            tweets = analisador.buscar_tweets_simulados(topico, quantidade)
            
            if not tweets:
                st.error("‚ùå Nenhum tweet encontrado para an√°lise.")
                return
            
            # M√©tricas principais
            st.subheader(f"üìä An√°lise: {topico}")
            
            col1, col2, col3, col4 = st.columns(4)
            
            total_positivo = sum(1 for t in tweets if "POSITIVO" in t['sentimento'])
            total_negativo = sum(1 for t in tweets if "NEGATIVO" in t['sentimento'])
            total_neutro = sum(1 for t in tweets if "NEUTRO" in t['sentimento'])
            
            with col1:
                st.metric("üòä Positivos", total_positivo)
            with col2:
                st.metric("üò† Negativos", total_negativo)
            with col3:
                st.metric("üòê Neutros", total_neutro)
            with col4:
                sentimento_geral = "üòä Positivo" if total_positivo > total_negativo else "üò† Negativo" if total_negativo > total_positivo else "üòê Neutro"
                st.metric("üé≠ Sentimento Geral", sentimento_geral)
            
            # Gr√°fico de pizza
            st.markdown("---")
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("üìà Distribui√ß√£o de Sentimentos")
                
                # DataFrame para gr√°fico
                df = pd.DataFrame({
                    'Sentimento': ['Positivos', 'Negativos', 'Neutros'],
                    'Quantidade': [total_positivo, total_negativo, total_neutro],
                    'Cor': ['#2ecc71', '#e74c3c', '#f39c12']
                })
                
                fig = px.pie(df, values='Quantidade', names='Sentimento', 
                            color='Sentimento', color_discrete_map={
                                'Positivos': '#2ecc71',
                                'Negativos': '#e74c3c', 
                                'Neutros': '#f39c12'
                            })
                fig.update_traces(textposition='inside', textinfo='percent+label')
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                st.subheader("üìä An√°lise Detalhada")
                
                # Gr√°fico de barras
                categorias = ['Muito Positivo', 'Positivo', 'Neutro', 'Negativo', 'Muito Negativo']
                valores = [
                    sum(1 for t in tweets if "MUITO POSITIVO" in t['sentimento']),
                    sum(1 for t in tweets if t['sentimento'] == "üòä POSITIVO"),
                    sum(1 for t in tweets if t['sentimento'] == "üòê NEUTRO"),
                    sum(1 for t in tweets if t['sentimento'] == "üò† NEGATIVO"),
                    sum(1 for t in tweets if "MUITO NEGATIVO" in t['sentimento'])
                ]
                
                fig = go.Figure(data=[
                    go.Bar(x=categorias, y=valores, 
                          marker_color=['#27ae60', '#2ecc71', '#f39c12', '#e67e22', '#c0392b'])
                ])
                fig.update_layout(xaxis_title="Categorias", yaxis_title="Quantidade")
                st.plotly_chart(fig, use_container_width=True)
            
            # Tweets individuais
            st.markdown("---")
            st.subheader("üê¶ Tweets Analisados")
            
            for i, tweet in enumerate(tweets, 1):
                with st.container():
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        st.write(f"**{i}. {tweet['texto']}**")
                        if tweet['palavras_chave']:
                            st.caption(f"üîç Palavras-chave: {', '.join(tweet['palavras_chave'])}")
                    
                    with col2:
                        st.markdown(f"""
                        <div style='background-color: {tweet['cor']}20; padding: 10px; border-radius: 5px; border-left: 4px solid {tweet['cor']}'>
                            <strong>{tweet['sentimento']}</strong><br>
                            Score: {tweet['score']}<br>
                            ‚ù§Ô∏è {tweet['likes']} | üîÑ {tweet['retweets']}
                        </div>
                        """, unsafe_allow_html=True)
                
                st.write("---")
    
    else:
        # Tela inicial
        st.info("üéØ Selecione um t√≥pico e clique em 'Analisar Sentimentos' para come√ßar!")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.subheader("üöÄ Como funciona:")
            st.write("""
            1. **Escolha um t√≥pico** ou digite um personalizado
            2. **Selecione quantos tweets** analisar
            3. **Clique em analisar** e veja os resultados
            4. **Explore os gr√°ficos** e m√©tricas
            """)
        
        with col2:
            st.subheader("üìä M√©tricas:")
            st.write("""
            - **Sentimento geral** do t√≥pico
            - **Distribui√ß√£o** positiva/negativa/neutra
            - **An√°lise detalhada** por categoria
            - **Tweets individuais** com scores
            """)
        
        with col3:
            st.subheader("üéØ Use para:")
            st.write("""
            - **Pesquisa de mercado**
            - **Monitoramento de marca**
            - **An√°lise de opini√£o p√∫blica**
            - **Estudos acad√™micos**
            """)

if __name__ == "__main__":
    main()