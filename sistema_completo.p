#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import json
import sqlite3
from datetime import datetime, timedelta
import random
import os

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema Completo de An√°lise",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS premium
st.markdown("""
<style>
    .main-header {
        font-size: 3.5rem;
        background: linear-gradient(45deg, #FF6B6B, #4ECDC4, #45B7D1);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-align: center;
        margin-bottom: 1rem;
        font-weight: bold;
    }
    .premium-card {
        background: white;
        padding: 1.5rem;
        border-radius: 15px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        border-left: 5px solid;
        margin: 0.5rem;
        transition: transform 0.2s;
    }
    .premium-card:hover {
        transform: translateY(-5px);
    }
    .positive-card { border-left-color: #00b894; }
    .negative-card { border-left-color: #e17055; }
    .neutral-card { border-left-color: #fdcb6e; }
    .tweet-card {
        background: white;
        padding: 1.2rem;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        margin: 0.8rem 0;
        border-left: 5px solid;
        transition: all 0.3s ease;
    }
    .tweet-card:hover {
        box-shadow: 0 6px 20px rgba(0,0,0,0.15);
    }
</style>
""", unsafe_allow_html=True)

class DatabaseManager:
    def __init__(self):
        self.db_path = "analises_sentimentos.db"
        self._init_database()
    
    def _init_database(self):
        """Inicializa o banco de dados SQLite"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS analises (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                topico TEXT NOT NULL,
                data_analise TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                total_tweets INTEGER,
                positivos INTEGER,
                negativos INTEGER,
                neutros INTEGER,
                sentimento_geral TEXT,
                dados_tweets TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def salvar_analise(self, topico, tweets, resultados):
        """Salva uma an√°lise no banco de dados"""
        total_positivo = sum(1 for t in tweets if "POSITIVO" in t['sentimento'])
        total_negativo = sum(1 for t in tweets if "NEGATIVO" in t['sentimento'])
        total_neutro = sum(1 for t in tweets if "NEUTRO" in t['sentimento'])
        
        sentimento_geral = "POSITIVO" if total_positivo > total_negativo else "NEGATIVO" if total_negativo > total_positivo else "NEUTRO"
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO analises 
            (topico, total_tweets, positivos, negativos, neutros, sentimento_geral, dados_tweets)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (topico, len(tweets), total_positivo, total_negativo, total_neutro, sentimento_geral, json.dumps(tweets)))
        
        conn.commit()
        conn.close()
    
    def obter_historico(self, limite=10):
        """Obt√©m o hist√≥rico de an√°lises"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT * FROM analises 
            ORDER BY data_analise DESC 
            LIMIT ?
        ''', (limite,))
        
        resultados = cursor.fetchall()
        conn.close()
        
        historico = []
        for row in resultados:
            historico.append({
                'id': row[0],
                'topico': row[1],
                'data': row[2],
                'total_tweets': row[3],
                'positivos': row[4],
                'negativos': row[5],
                'neutros': row[6],
                'sentimento_geral': row[7],
                'tweets': json.loads(row[8]) if row[8] else []
            })
        
        return historico
    
    def obter_estatisticas(self):
        """Obt√©m estat√≠sticas gerais"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM analises')
        total_analises = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(DISTINCT topico) FROM analises')
        topicos_unicos = cursor.fetchone()[0]
        
        cursor.execute('SELECT SUM(total_tweets) FROM analises')
        total_tweets = cursor.fetchone()[0] or 0
        
        conn.close()
        
        return {
            'total_analises': total_analises,
            'topicos_unicos': topicos_unicos,
            'total_tweets': total_tweets
        }

class SistemaAnaliseCompleto:
    def __init__(self):
        self.db = DatabaseManager()
        self.topicos_populares = {
            "ü§ñ Tecnologia": self._gerar_tweets_tecnologia(),
            "üé¨ Entretenimento": self._gerar_tweets_entretenimento(),
            "üèõÔ∏è Pol√≠tica": self._gerar_tweets_politica(),
            "‚öΩ Esportes": self._gerar_tweets_esportes(),
            "üõí Compras": self._gerar_tweets_compras(),
            "üçî Alimenta√ß√£o": self._gerar_tweets_alimentacao(),
            "üöó Autom√≥veis": self._gerar_tweets_automoveis(),
            "üéÆ Games": self._gerar_tweets_games()
        }
        
        self.palavras_positivas = {
            'amo': 3, 'adoro': 3, 'incr√≠vel': 2, 'fant√°stico': 2, 'sensacional': 2,
            'maravilhoso': 2, 'perfeito': 2, 'excelente': 2, '√≥timo': 1, 'bom': 1,
            'top': 2, 'show': 2, 'maneiro': 1, 'curti': 1, 'gostei': 1, 'amei': 2,
            'recomendo': 1, 'nota10': 2, 'feliz': 1, 'alegre': 1, 'emocionante': 2,
            'revolucionando': 2, 'absurda': 2, 'melhor': 1, 'espetacular': 2,
            'impressionante': 2, 'fenomenal': 2, 'genial': 2, 'brilhante': 2,
            'excepcional': 2, 'surpreendente': 2, 'formid√°vel': 2
        }
        
        self.palavras_negativas = {
            'odeio': 3, 'detesto': 3, 'horr√≠vel': 2, 'terr√≠vel': 2, 'p√©ssimo': 2,
            'ruim': 1, 'lixo': 3, 'porcaria': 2, 'horroroso': 2, 'decepcionante': 2,
            'furada': 2, 'assustadora': 2, 'travando': 1, 'superestimado': 1,
            'nojo': 3, 'vergonha': 2, 'frustrado': 1, 'incompetente': 2,
            'cat√°strofe': 3, 'desastre': 2, 'pessimo': 2, 'horrivel': 2,
            'med√≠ocre': 2, 'lament√°vel': 2, 'rid√≠culo': 2, 'insuport√°vel': 2
        }

    def _gerar_tweets_tecnologia(self):
        return [
            "ChatGPT est√° revolucionando tudo! Incr√≠vel demais! ü§ñ",
            "Meu novo MacBook √© fant√°stico, performance absurda! üíª",
            "Python √© sensacional para data science! üêç",
            "Odeio quando o Windows atualiza sozinho! üò†",
            "Intelig√™ncia Artificial est√° impressionante!",
            "Fone Bluetooth novo com qualidade horr√≠vel!",
            "GitHub Copilot mudou minha vida! Recomendo!",
            "Smartphone Android travando toda hora!",
            "Metaverso √© uma furada completa!",
            "Linux √© perfeito para desenvolvimento! üêß"
        ]

    def _gerar_tweets_entretenimento(self):
        return [
            "Filme novo √© simplesmente espetacular! üé¨",
            "Que decep√ß√£o com a nova s√©rie!",
            "Atua√ß√µes fenomenais no √∫ltimo filme! üëè",
            "Efeitos especiais uma cat√°strofe!",
            "Document√°rio incr√≠vel, mind blowing!",
            "Streaming caro e cat√°logo meia boca!",
            "Final de s√©rie foi perfeito!",
            "Roteiro horr√≠vel, atua√ß√µes p√©ssimas!",
            "Diretor fez trabalho brilhante!",
            "Pior filme que j√° vi na vida!"
        ]

    def _gerar_tweets_politica(self):
        return [
            "Governo acertou na nova medida! üëç",
            "Pol√≠ticos s√≥ sabem mentir, que nojo!",
            "Reforma importante para o pa√≠s!",
            "Corrup√ß√£o nunca acaba, desanimador!",
            "Projeto excelente para educa√ß√£o!",
            "Situa√ß√£o do pa√≠s est√° terr√≠vel!",
            "L√≠der fez discurso inspirador!",
            "Que vergonha do congresso!",
            "Medida vai ajudar milh√µes!",
            "Estou furioso com as not√≠cias!"
        ]

    def _gerar_tweets_esportes(self):
        return [
            "Jogo incr√≠vel, time jogou demais! ‚öΩ",
            "Arbitragem horr√≠vel, roubaram o jogo!",
            "Jogador foi fenomenal, hat-trick!",
            "Derrota dolorosa, time desistiu!",
            "Contrata√ß√£o excelente para o elenco!",
            "Que time ruim, n√£o acerta nada!",
            "Torcida maravilhosa, apoiou at√© o final!",
            "T√©cnico incompetente, tem que sair!",
            "Gol mais bonito que j√° vi! ü•Ö",
            "Precisamos de refor√ßos urgentemente!"
        ]

    def _gerar_tweets_compras(self):
        return [
            "Produto excelente, superou expectativas! üì¶",
            "Que decep√ß√£o com a qualidade!",
            "Entrega super r√°pida, adorei! üöö",
            "Atendimento horr√≠vel, nunca mais!",
            "Site f√°cil de usar, experi√™ncia √≥tima!",
            "Produto veio com defeito, que raiva!",
            "Recomendo muito essa loja!",
            "P√©ssimo custo-benef√≠cio!",
            "Embalagem perfeita, muito cuidado!",
            "Golpe completo, produto fake!"
        ]

    def _gerar_tweets_alimentacao(self):
        return [
            "Restaurante novo √© fant√°stico! üçù",
            "Comida horr√≠vel, nunca mais volto!",
            "Hamb√∫rguer mais incr√≠vel que j√° comi! üçî",
            "Servi√ßo p√©ssimo, demorou horas!",
            "Sobremesa divina, perfeita! üç∞",
            "Pre√ßos abusivos, n√£o vale a pena!",
            "Atendimento impec√°vel! üëè",
            "Comida veio fria, que decep√ß√£o!",
            "Ambiente agrad√°vel, m√∫sica √≥tima!",
            "Lugar sujo, comida ruim!"
        ]

    def _gerar_tweets_automoveis(self):
        return [
            "Carro novo √© espetacular! üöó",
            "Manuten√ß√£o cara demais, arrependimento!",
            "Desempenho fant√°stico na estrada!",
            "Consumo de combust√≠vel horr√≠vel!",
            "Conforto incr√≠vel, amo dirigir!",
            "Problemas constantes, s√≥ dor de cabe√ßa!",
            "Design lindo, todo mundo elogia!",
            "Revenda dif√≠cil, pre√ßo cai muito!",
            "Tecnologia de ponta, sensacional!",
            "Carro beberr√£o, gasto fortuna!"
        ]

    def _gerar_tweets_games(self):
        return [
            "Jogo novo √© viciante! üéÆ",
            "Gr√°gicos horr√≠veis, decepcionante!",
            "Gameplay fluida e divertida!",
            "Servidores lagados, imposs√≠vel jogar!",
            "Hist√≥ria emocionante, masterpiece!",
            "Pre√ßo abusivo pelo que oferece!",
            "Multiplayer incr√≠vel com amigos!",
            "Cheio de bugs, inacabado!",
            "Gr√°gicos lindos, imersivo!",
            "Suporte t√©cnico inexistente!"
        ]

    def analisar_sentimento(self, texto):
        texto = texto.lower()
        score = 0
        palavras_detectadas = []
        
        for palavra in texto.split():
            if palavra in self.palavras_positivas:
                score += self.palavras_positivas[palavra]
                palavras_detectadas.append(f"‚ûï{palavra}")
            elif palavra in self.palavras_negativas:
                score += self.palavras_negativas[palavra]
                palavras_detectadas.append(f"‚ûñ{palavra}")
        
        if score >= 3:
            return "üòç MUITO POSITIVO", score, palavras_detectadas, "#00b894", "üü¢"
        elif score >= 1:
            return "üòä POSITIVO", score, palavras_detectadas, "#00cec9", "üü¢"
        elif score <= -3:
            return "ü§¨ MUITO NEGATIVO", score, palavras_detectadas, "#d63031", "üî¥"
        elif score <= -1:
            return "üò† NEGATIVO", score, palavras_detectadas, "#e17055", "üî¥"
        else:
            return "üòê NEUTRO", score, palavras_detectadas, "#fdcb6e", "üü°"

    def buscar_tweets_simulados(self, topico, quantidade=12):
        if topico in self.topicos_populares:
            base = self.topicos_populares[topico]
        else:
            base = list(self.topicos_populares.values())[0]
        
        tweets = random.sample(base, min(quantidade, len(base)))
        
        tweets_com_dados = []
        for texto in tweets:
            sentimento, score, palavras, cor, emoji = self.analisar_sentimento(texto)
            tweets_com_dados.append({
                'texto': texto,
                'sentimento': sentimento,
                'score': score,
                'palavras_chave': palavras[:3],
                'cor': cor,
                'emoji': emoji,
                'usuario': f'user_{random.randint(1000, 9999)}',
                'likes': random.randint(0, 500),
                'retweets': random.randint(0, 100),
                'data': (datetime.now() - timedelta(hours=random.randint(1, 24))).strftime("%d/%m %H:%M")
            })
        
        return tweets_com_dados

def main():
    sistema = SistemaAnaliseCompleto()
    
    # Header premium
    st.markdown('<h1 class="main-header">ü§ñ SISTEMA COMPLETO DE AN√ÅLISE</h1>', unsafe_allow_html=True)
    st.markdown("### üöÄ An√°lise de Sentimentos com Hist√≥rico e Banco de Dados")
    st.markdown("---")
    
    # Sidebar avan√ßada
    with st.sidebar:
        st.header("üéØ Controle Principal")
        
        # Abas na sidebar
        aba_principal, aba_historico, aba_estatisticas = st.tabs(["üîç An√°lise", "üìä Hist√≥rico", "üìà Stats"])
        
        with aba_principal:
            topico = st.selectbox(
                "Selecione o t√≥pico:",
                list(sistema.topicos_populares.keys())
            )
            
            quantidade = st.slider("Tweets para analisar:", 8, 20, 12)
            
            if st.button("üöÄ Executar An√°lise", type="primary", use_container_width=True):
                st.session_state.analisar = True
                st.session_state.topico = topico
                st.session_state.quantidade = quantidade
        
        with aba_historico:
            st.subheader("üìú √öltimas An√°lises")
            historico = sistema.db.obter_historico(5)
            
            if historico:
                for analise in historico:
                    emoji = "üòä" if analise['sentimento_geral'] == "POSITIVO" else "üò†" if analise['sentimento_geral'] == "NEGATIVO" else "üòê"
                    st.write(f"{emoji} **{analise['topico']}**")
                    st.caption(f"üìÖ {analise['data'][:16]} | üê¶ {analise['total_tweets']} tweets")
            else:
                st.info("Nenhuma an√°lise no hist√≥rico")
        
        with aba_estatisticas:
            st.subheader("üìä Estat√≠sticas Gerais")
            stats = sistema.db.obter_estatisticas()
            
            st.metric("Total de An√°lises", stats['total_analises'])
            st.metric("T√≥picos √önicos", stats['topicos_unicos'])
            st.metric("Tweets Analisados", stats['total_tweets'])
    
    # Conte√∫do principal
    if st.session_state.get('analisar', False):
        topico = st.session_state.topico
        quantidade = st.session_state.quantidade
        
        with st.spinner("üîç Analisando sentimentos..."):
            tweets = sistema.buscar_tweets_simulados(topico, quantidade)
            
            # Salvar no banco de dados
            sistema.db.salvar_analise(topico, tweets, {})
            
            # M√©tricas premium
            st.subheader(f"üìä An√°lise: {topico}")
            
            total_positivo = sum(1 for t in tweets if "POSITIVO" in t['sentimento'])
            total_negativo = sum(1 for t in tweets if "NEGATIVO" in t['sentimento'])
            total_neutro = sum(1 for t in tweets if "NEUTRO" in t['sentimento'])
            
            # Grid de m√©tricas
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.markdown(f"""
                <div class="premium-card positive-card">
                    <h3>üòä Positivos</h3>
                    <h2 style="color: #00b894;">{total_positivo}</h2>
                    <p>{total_positivo/len(tweets)*100:.1f}% do total</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                st.markdown(f"""
                <div class="premium-card negative-card">
                    <h3>üò† Negativos</h3>
                    <h2 style="color: #e17055;">{total_negativo}</h2>
                    <p>{total_negativo/len(tweets)*100:.1f}% do total</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col3:
                st.markdown(f"""
                <div class="premium-card neutral-card">
                    <h3>üòê Neutros</h3>
                    <h2 style="color: #fdcb6e;">{total_neutro}</h2>
                    <p>{total_neutro/len(tweets)*100:.1f}% do total</p>
                </div>
                """, unsafe_allow_html=True)
            
            with col4:
                sentimento_geral = "üòä Positivo" if total_positivo > total_negativo else "üò† Negativo" if total_negativo > total_positivo else "üòê Neutro"
                cor_geral = "#00b894" if total_positivo > total_negativo else "#e17055" if total_negativo > total_positivo else "#fdcb6e"
                st.markdown(f"""
                <div class="premium-card" style="border-left-color: {cor_geral}">
                    <h3>üé≠ Sentimento Geral</h3>
                    <h2 style="color: {cor_geral};">{sentimento_geral}</h2>
                    <p>Baseado em {len(tweets)} an√°lises</p>
                </div>
                """, unsafe_allow_html=True)
            
            # Visualiza√ß√µes
            st.markdown("---")
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("üìà Distribui√ß√£o de Sentimentos")
                
                df = pd.DataFrame({
                    'Categoria': ['Muito Positivo', 'Positivo', 'Neutro', 'Negativo', 'Muito Negativo'],
                    'Quantidade': [
                        sum(1 for t in tweets if "MUITO POSITIVO" in t['sentimento']),
                        sum(1 for t in tweets if t['sentimento'] == "üòä POSITIVO"),
                        sum(1 for t in tweets if t['sentimento'] == "üòê NEUTRO"),
                        sum(1 for t in tweets if t['sentimento'] == "üò† NEGATIVO"),
                        sum(1 for t in tweets if "MUITO NEGATIVO" in t['sentimento'])
                    ]
                })
                
                fig = px.bar(df, x='Categoria', y='Quantidade', 
                           color='Categoria',
                           color_discrete_map={
                               'Muito Positivo': '#00b894',
                               'Positivo': '#00cec9', 
                               'Neutro': '#fdcb6e',
                               'Negativo': '#e17055',
                               'Muito Negativo': '#d63031'
                           })
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                st.subheader("üéØ An√°lise Detalhada")
                
                fig_pizza = px.pie(
                    names=['Positivos', 'Negativos', 'Neutros'],
                    values=[total_positivo, total_negativo, total_neutro],
                    color=['Positivos', 'Negativos', 'Neutros'],
                    color_discrete_map={
                        'Positivos': '#00b894',
                        'Negativos': '#e17055',
                        'Neutros': '#fdcb6e'
                    }
                )
                fig_pizza.update_traces(textposition='inside', textinfo='percent+label')
                st.plotly_chart(fig_pizza, use_container_width=True)
            
            # Tweets individuais
            st.markdown("---")
            st.subheader(f"üê¶ An√°lise Individual dos Tweets")
            
            for i, tweet in enumerate(tweets, 1):
                st.markdown(f"""
                <div class="tweet-card" style="border-left-color: {tweet['cor']}">
                    <div style="display: flex; justify-content: space-between; align-items: start;">
                        <div style="flex: 1;">
                            <h4 style="margin: 0; color: #2d3436;">{tweet['texto']}</h4>
                            <div style="margin-top: 8px;">
                                <small>üë§ @{tweet['usuario']} | üìÖ {tweet['data']}</small>
                                <br>
                                <small>‚ù§Ô∏è {tweet['likes']} likes | üîÑ {tweet['retweets']} retweets</small>
                                {f'<br><small>üîç <strong>Palavras-chave:</strong> {", ".join(tweet["palavras_chave"])}</small>' if tweet['palavras_chave'] else ''}
                            </div>
                        </div>
                        <div style="text-align: right; min-width: 120px;">
                            <div style="background: {tweet['cor']}15; padding: 10px; border-radius: 8px; border: 2px solid {tweet['cor']}30;">
                                <strong style="color: {tweet['cor']};">{tweet['emoji']} {tweet['sentimento']}</strong>
                                <br>
                                <small>Score: {tweet['score']}</small>
                            </div>
                        </div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
    
    else:
        # Tela inicial premium
        st.success("üéâ Bem-vindo ao Sistema Completo de An√°lise de Sentimentos!")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üöÄ Recursos do Sistema:")
            st.write("""
            - **ü§ñ An√°lise com Machine Learning**
            - **üíæ Banco de Dados SQLite integrado**
            - **üìä Hist√≥rico completo de an√°lises**
            - **üéØ 8 categorias diferentes**
            - **üìà Estat√≠sticas em tempo real**
            - **üí´ Interface premium**
            - **üîí 100% local e privado**
            """)
        
        with col2:
            st.subheader("üìà Como Usar:")
            st.write("""
            1. **Selecione um t√≥pico** no menu lateral
            2. **Ajuste a quantidade** de tweets
            3. **Clique em Executar An√°lise**
            4. **Explore os resultados** completos
            5. **Acesse o hist√≥rico** quando quiser
            """)
            
            st.info("""
            **üí° Dica:** Todas as an√°lises s√£o salvas 
            automaticamente no banco de dados local.
            """)
        
        st.markdown("---")
        st.subheader("üéØ Categorias Dispon√≠veis:")
        
        # Grid de categorias
        cols = st.columns(4)
        topicos = list(sistema.topicos_populares.keys())
        
        for i, (col, topico) in enumerate(zip(cols * 2, topicos)):
            with col:
                emoji, nome = topico.split(" ", 1)
                st.info(f"**{emoji} {nome}**")

if __name__ == "__main__":
    if 'analisar' not in st.session_state:
        st.session_state.analisar = False
    
    main()