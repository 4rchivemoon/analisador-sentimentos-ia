import streamlit as st
import pandas as pd
import plotly.express as px
import random
from textblob import TextBlob

# CONFIGURA√á√ÉO DA P√ÅGINA
st.set_page_config(
    page_title="Analisador de Sentimentos",
    page_icon="üß†",
    layout="wide"
)

# CSS LIMPO
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 1rem;
        font-weight: 600;
    }
    
    .metric-card {
        background: white;
        padding: 1.5rem;
        border-radius: 8px;
        border: 1px solid #e0e0e0;
        text-align: center;
        margin: 0.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .metric-value {
        font-size: 2rem;
        font-weight: bold;
        color: #1f77b4;
        margin: 0.5rem 0;
    }
    
    .tweet-card {
        background: white;
        padding: 1rem;
        margin: 0.5rem 0;
        border-radius: 6px;
        border-left: 4px solid #e0e0e0;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    
    .sentiment-badge {
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-weight: 600;
        font-size: 0.8rem;
        display: inline-block;
    }
</style>
""", unsafe_allow_html=True)

class AnalisadorSentimentos:
    def __init__(self):
        self.categorias = [
            "üöÄ Tecnologia & Inova√ß√£o",
            "üé¨ Entretenimento & Cultura", 
            "üíº Neg√≥cios & Economia",
            "üèÜ Esportes & Competi√ß√µes",
            "üåç Sustentabilidade & Meio Ambiente",
            "üèõÔ∏è Pol√≠tica & Sociedade",
            "üéµ M√∫sica & Artes",
            "üõí Consumo & Marcas"
        ]
    
    def buscar_dados(self, topico, quantidade):
        """Dados de exemplo para demonstra√ß√£o"""
        dados_por_topico = {
            "üöÄ Tecnologia & Inova√ß√£o": [
                "Intelig√™ncia Artificial est√° revolucionando tudo! ü§ñ Incr√≠vel demais!",
                "Novo smartphone com c√¢mera espetacular! üì∏ Qualidade impressionante!",
                "Metaverso ainda √© uma inc√≥gnita... ü§î N√£o sei o que pensar",
                "Python continua dominando o mundo da data science! üêç",
                "Privacidade digital √© uma grande preocupa√ß√£o atualmente üòü"
            ],
            "üé¨ Entretenimento & Cultura": [
                "S√©rie nova na Netflix √© simplesmente perfeita! üé¨",
                "Final decepcionante arruinou toda a temporada üòû",
                "Atua√ß√µes fenomenais no √∫ltimo filme que assisti! üåü",
                "Streaming caro demais pelo conte√∫do oferecido üí∏",
                "Document√°rio sobre natureza √© visualmente deslumbrante! üåç"
            ],
            "üíº Neg√≥cios & Economia": [
                "Mercado de criptomoedas em alta impressionante! üìà",
                "Startup innovando com solu√ß√µes brilhantes! üí°",
                "Economia global em momento delicado üò∞",
                "Empreendedorismo digital crescendo exponencialmente! üöÄ",
                "Fus√£o empresarial beneficiando todos os lados! ü§ù"
            ],
            "üèÜ Esportes & Competi√ß√µes": [
                "Jogo hist√≥rico com performance espetacular! ‚öΩ",
                "Arbitragem controversa decidindo o resultado üò†",
                "Atleta quebrando recordes mundialmente! üèÜ",
                "Time favorito decepcionando na temporada üòî",
                "Torcida animada criando atmosfera incr√≠vel! üî•"
            ],
            "üåç Sustentabilidade & Meio Ambiente": [
                "Energia solar revolucionando matriz energ√©tica! ‚òÄÔ∏è",
                "Projetos de reflorestamento com resultados incr√≠veis! üå≥",
                "Consumo consciente ganhando for√ßa na sociedade! üíö",
                "Polui√ß√£o pl√°stica ainda √© desafio enorme üòû",
                "Tecnologias verdes com potencial transformador! üîã"
            ],
            "üèõÔ∏è Pol√≠tica & Sociedade": [
                "Medida governamental beneficiando popula√ß√£o! üëç",
                "Corrup√ß√£o minando desenvolvimento nacional üò†",
                "Di√°logo internacional construindo pontes! üåê",
                "Pol√≠ticas p√∫blicas precisando de ajustes üìã",
                "Lideran√ßa inspiradora em momento crucial! üí´"
            ],
            "üéµ M√∫sica & Artes": [
                "√Ålbum novo superando todas as expectativas! üéµ",
                "Show ao vivo com energia contagiante! ‚ö°",
                "Letras profundas e melodias cativantes! ‚ú®",
                "Produ√ß√£o musical com qualidade question√°vel üéß",
                "Artista revela√ß√£o com talento extraordin√°rio! üåü"
            ],
            "üõí Consumo & Marcas": [
                "Produto com design inovador e funcional! üõçÔ∏è",
                "Atendimento ao cliente preciso e √°gil! üí¨",
                "Qualidade abaixo do esperado para o pre√ßo üí∏",
                "Experi√™ncia de compra online fluida! üì±",
                "Entrega r√°pida e embalagem cuidadosa! üì¶"
            ]
        }
        
        dados = dados_por_topico.get(topico, ["Texto de exemplo para an√°lise..."])
        return random.sample(dados, min(quantidade, len(dados)))
    
    def analisar_sentimento(self, texto):
        """An√°lise de sentimentos usando TextBlob"""
        try:
            analysis = TextBlob(texto)
            polarity = analysis.sentiment.polarity
            
            if polarity > 0.2:
                return "üåü MUITO POSITIVO", polarity, "#00b894", "üéØ"
            elif polarity > 0.05:
                return "‚úÖ POSITIVO", polarity, "#00cec9", "‚Üë"
            elif polarity < -0.2:
                return "üí• MUITO NEGATIVO", polarity, "#d63031", "‚ö†Ô∏è"
            elif polarity < -0.05:
                return "‚ùå NEGATIVO", polarity, "#e17055", "‚Üì"
            else:
                return "‚öñÔ∏è NEUTRO", polarity, "#fdcb6e", "‚û°Ô∏è"
        except:
            return "‚öñÔ∏è NEUTRO", 0, "#fdcb6e", "‚û°Ô∏è"

def main():
    analyzer = AnalisadorSentimentos()
    
    # HEADER
    st.markdown('<h1 class="main-header">üß† Analisador de Sentimentos</h1>', unsafe_allow_html=True)
    st.markdown('<p style="text-align: center; color: #666; margin-bottom: 2rem;">An√°lise de sentimentos em textos em portugu√™s</p>', unsafe_allow_html=True)
    
    # SIDEBAR
    with st.sidebar:
        st.header("üéõÔ∏è Configura√ß√µes")
        
        topico = st.selectbox("Selecione a Categoria:", analyzer.categorias)
        quantidade = st.slider("Quantidade de textos:", 3, 10, 5)
        
        if st.button("üîç Analisar Sentimentos", use_container_width=True):
            st.session_state.analisar = True
            st.session_state.topico = topico
            st.session_state.quantidade = quantidade
    
    # CONTE√öDO PRINCIPAL
    if st.session_state.get('analisar', False):
        topico = st.session_state.topico
        quantidade = st.session_state.quantidade
        
        with st.spinner("Analisando sentimentos..."):
            textos = analyzer.buscar_dados(topico, quantidade)
            resultados = []
            
            for texto in textos:
                sentimento, score, cor, emoji = analyzer.analisar_sentimento(texto)
                resultados.append({
                    'texto': texto,
                    'sentimento': sentimento,
                    'score': score,
                    'cor': cor,
                    'emoji': emoji
                })
            
            # M√âTRICAS
            col1, col2, col3 = st.columns(3)
            
            with col1:
                positivos = sum(1 for r in resultados if "POSITIVO" in r['sentimento'])
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-value">{positivos}</div>
                    <div>Positivos</div>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                negativos = sum(1 for r in resultados if "NEGATIVO" in r['sentimento'])
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-value">{negativos}</div>
                    <div>Negativos</div>
                </div>
                """, unsafe_allow_html=True)
            
            with col3:
                neutros = sum(1 for r in resultados if "NEUTRO" in r['sentimento'])
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-value">{neutros}</div>
                    <div>Neutros</div>
                </div>
                """, unsafe_allow_html=True)
            
            # GR√ÅFICO
            st.markdown("---")
            st.subheader("üìä Distribui√ß√£o de Sentimentos")
            
            df = pd.DataFrame({
                'Sentimento': ['Positivo', 'Negativo', 'Neutro'],
                'Quantidade': [positivos, negativos, neutros]
            })
            
            fig = px.bar(df, x='Sentimento', y='Quantidade', 
                        color='Sentimento',
                        color_discrete_map={
                            'Positivo': '#00b894', 
                            'Negativo': '#d63031', 
                            'Neutro': '#fdcb6e'
                        })
            fig.update_layout(showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
            
            # AN√ÅLISE DETALHADA
            st.markdown("---")
            st.subheader(f"üîç An√°lise Detalhada: {topico}")

            for resultado in resultados:
                st.markdown(f"""
                <div class="tweet-card">
                    <div style="display: flex; justify-content: space-between; align-items: start;">
                        <div style="flex: 1;">
                            <p style="margin: 0; line-height: 1.5;">{resultado['texto']}</p>
                            <small style="color: #666;">Score: {resultado['score']:.2f}</small>
                        </div>
                        <div style="text-align: right;">
                            <div class="sentiment-badge" style="background-color: {resultado['cor']}20; color: {resultado['cor']}; border: 1px solid {resultado['cor']}40;">
                                <strong>{resultado['emoji']} {resultado['sentimento']}</strong>
                            </div>
                        </div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
    
    else:
        # TELA INICIAL
        st.info("üí° **Como usar:** Selecione uma categoria no menu lateral e clique em 'Analisar Sentimentos' para come√ßar.")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üéØ Funcionalidades")
            st.write("""
            - An√°lise de sentimentos em tempo real
            - Dashboard interativo com gr√°ficos
            - Suporte a m√∫ltiplas categorias
            - Interface simples e intuitiva
            """)
        
        with col2:
            st.subheader("üõ†Ô∏è Tecnologias")
            st.write("""
            - Python
            - Streamlit
            - TextBlob (NLP)
            - Plotly (gr√°ficos)
            - Pandas (dados)
            """)

if __name__ == "__main__":
    if 'analisar' not in st.session_state:
        st.session_state.analisar = False
    
    main()
